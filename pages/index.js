import Head from 'next/head'
import styles from '../styles/Home.module.css'
import Script from 'next/script'
import React, { useState, useEffect } from 'react';
import Web3 from 'web3'
import MetaCoinABI from '../abi/metacoin_abi'

export default function Home() {

  const [balance, setBalance] = useState('')
  const [toAddress, setToAddress] = useState('')
  const [amount, setAmount] = useState('')
  const [accounts,setAccounts] = useState([])
  const [userAccount,setUserAccount] = useState('')

  // スマートコントラクトのアドレス
  const smartContractAddress = "0x1281b7c3630F8bACF413fBA3Fd6c8b474E0FE8b4"
      
  // Ganacheに接続するweb3インスタンス作成
  const web3 = new Web3('ws://localhost:7545');

  // コントラクト接続用インスタンスの作成
  const instance = new web3.eth.Contract(MetaCoinABI, smartContractAddress)

  function handleSubmit(e) {
    e.preventDefault()
    if(instance){
      sendCoin()
    }
  }

  function handleUserSelector(e) {
    e.preventDefault()
    setUserAccount(e.target.value)
    if(instance){
      getBalance(userAccount).then((res) => {
        setBalance(res)
      })
    }
  }

  function sendCoin(){
    return instance.methods.sendCoin(toAddress, amount).send({ from: userAccount })
            .on("receipt", function(receipt){
              console.log(receipt)
              alert('送金しました')
              getBalance(userAccount).then((res) => {
                setBalance(res)
              })
            }).on("error", function(err){
              console.log(err)
            })
  }

  function getBalance(user) {
    return instance.methods.getBalance(user).call()
  }

  function AccountOptions() {
    const optionItems = accounts.map((account) => {
      return <option key={account}>{account}</option>
    })
    return optionItems
  }

  useEffect(() => {
    async function startApp() {
      // ユーザのアカウント
      const accountsArray = await web3.eth.getAccounts()
      setAccounts(accountsArray)
      setUserAccount(accountsArray[0])
    }
    startApp()
  },[])

  useEffect(() => {
    if(instance && userAccount){
      getBalance(userAccount).then((res) => {
        setBalance(res)
      })
    }
  },[userAccount])

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossOrigin="anonymous"></link>
      </Head>
      <Script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossOrigin="anonymous"></Script>
      <div className="container">
        <h1 className="my-3">MetaCoin残高</h1>
        <div>
          <label htmlFor="fromAddress" className="form-label">MetaCoinアドレス</label>
          <select id="fromAddress" value={userAccount} className="form-select" aria-label="Default select example" onChange={handleUserSelector}>
            <AccountOptions/>
          </select>
        </div>
        <h5 className="my-3">残高：{balance} Meta</h5>
        <h1 className="my-3">MetaCoin送金</h1>
        <form onSubmit={handleSubmit}>
          <div>
            <label htmlFor="toAddress" className="form-label">送金先アドレス</label>
            <select id="toAddress" value={toAddress} className="form-select" aria-label="Default select example" onChange={(e) => setToAddress(e.target.value)}>
              <AccountOptions/>
            </select>
          </div>
          <div className="mb-3">
            <label htmlFor="sendAmount" className="form-label">送金額</label>
            <input type="number" id="sendAmount" className="form-control" value={amount} onChange={(e) => setAmount(e.target.value)}></input>
          </div>
          <input type="submit" value="上記内容で送金する" className="btn btn-dark"/>
        </form>
      </div>
      
    </div>
  )
}
